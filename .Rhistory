library(pracma)
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# (incluya aquÃƒ­ cualquier librerÃƒ­a a utilizar)
library(neuralnet)
library(clusterSim)
library(caret)
library(ModelMetrics)
#---------------------------------------------------------------------------
# Paso 1: Utilice la funciÃƒÂ³n read.csv para leer el contenido del fichero "hormigon.csv"
datos = read.csv("datos/hormigon.csv")
# Paso 2: Normalice todas las columnas del dataset (como en la prÃƒÂ¡ctica anterior)
datos = data.Normalization(datos,"n8","column")
# Paso 3: Utilice la funciÃƒÂ³n createDataPartition (paquete: caret) para dividir los datos en
# training (80%) y test (20%)
trainIndex = createDataPartition(datos$cement, p = 0.8, list = FALSE)
datostra = datos[trainIndex,]
datostst = datos[-trainIndex,]
# Paso 4: Cree un modelo de perceptrÃƒÂ³n simple (1 capa con 1 neurona), haciendo uso de la funciÃƒÂ³n neuralnet
# para predecir la fuerza (columna strength) en funciÃƒÂ³n del resto de atributos.
# Mida el tiempo que tarda en entrenar y guÃƒÂ¡rdelo en una variable
# --> modelo = neuralnet(...)
# * Asegurese de que la red converge, por lo que posiblemente deba cambiar algÃƒÂºn parÃƒÂ¡metro, como
# * el umbral, nÃƒÂºmero de pasos mÃƒÂ¡ximos o repeticiones
start_time = Sys.time()
modelo = neuralnet(strength ~ ., datostra, hidden = 1,linear.output = FALSE)
end_time = Sys.time()
tModelo = end_time - start_time
# Paso 5: Dibuje la "red" resultante haciendo uso del comando "plot"
plot(modelo,"best")
# (incluya aquÃƒ­ cualquier librerÃƒ­a a utilizar)
install.packages("tictoc")
library(tictoc)
# Paso 4: Cree un modelo de perceptrÃƒÂ³n simple (1 capa con 1 neurona), haciendo uso de la funciÃƒÂ³n neuralnet
# para predecir la fuerza (columna strength) en funciÃƒÂ³n del resto de atributos.
# Mida el tiempo que tarda en entrenar y guÃƒÂ¡rdelo en una variable
# --> modelo = neuralnet(...)
# * Asegurese de que la red converge, por lo que posiblemente deba cambiar algÃƒÂºn parÃƒÂ¡metro, como
# * el umbral, nÃƒÂºmero de pasos mÃƒÂ¡ximos o repeticiones
tic()
modelo = neuralnet(strength ~ ., datostra, hidden = 1,linear.output = FALSE)
end_time = Sys.time()
toc()
# Paso 4: Cree un modelo de perceptrÃƒÂ³n simple (1 capa con 1 neurona), haciendo uso de la funciÃƒÂ³n neuralnet
# para predecir la fuerza (columna strength) en funciÃƒÂ³n del resto de atributos.
# Mida el tiempo que tarda en entrenar y guÃƒÂ¡rdelo en una variable
# --> modelo = neuralnet(...)
# * Asegurese de que la red converge, por lo que posiblemente deba cambiar algÃƒÂºn parÃƒÂ¡metro, como
# * el umbral, nÃƒÂºmero de pasos mÃƒÂ¡ximos o repeticiones
tic()
modelo = neuralnet(strength ~ ., datostra, hidden = 1,linear.output = FALSE)
tModelo = toc()
View(tModelo)
tModelo
tModelo[3]
# Paso 8: Repita los pasos del 4 al 7 (guarde cada valor de MAE en una variable diferente) para
# las siguientes configuraciones:
# - Una red de una capa, con 5 neuronas
tic()
modelo1 = neuralnet(strength ~ ., datostra, hidden = 5,linear.output = FALSE)
toc()
tic()
modelo2 = neuralnet(strength ~ ., datostra, hidden = 100,linear.output = FALSE)
toc()
tic()
modelo3 = neuralnet(strength ~ ., datostra, hidden = c(5,20),linear.output = FALSE)
toc()
tic()
modelo4 = neuralnet(strength ~ ., datostra, hidden = c(20,5),linear.output = FALSE)
toc()
tic()
modelo5 = neuralnet(strength ~ ., datostra, hidden = c(20,20),linear.output = FALSE)
toc()
tic()
modelo = neuralnet(strength ~ ., datostra, hidden = 1,linear.output = FALSE)
tModelo = toc()
tModelo = tModelo[2]-tModelo[1]
tModelo[1]
tModelo[2]
# Paso 4: Cree un modelo de perceptrÃƒÂ³n simple (1 capa con 1 neurona), haciendo uso de la funciÃƒÂ³n neuralnet
# para predecir la fuerza (columna strength) en funciÃƒÂ³n del resto de atributos.
# Mida el tiempo que tarda en entrenar y guÃƒÂ¡rdelo en una variable
# --> modelo = neuralnet(...)
# * Asegurese de que la red converge, por lo que posiblemente deba cambiar algÃƒÂºn parÃƒÂ¡metro, como
# * el umbral, nÃƒÂºmero de pasos mÃƒÂ¡ximos o repeticiones
tic()
modelo = neuralnet(strength ~ ., datostra, hidden = 1,linear.output = FALSE)
tModelo = toc()
tModelo[1]
tModelo[2]
tModelo[[1]]
tModelo[1][1]
tModelo[1][2]
tModelo[1,1]
