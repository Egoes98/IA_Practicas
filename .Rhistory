# Paso 3: Defina la funciÃ³n de inicializaciÃ³n, que reciba el nÃºmero de individuos a crear
# y el nÃºmero de puntos (variable long). Ãsta funciÃ³n debe devolver una matriz con tantas
# filas como individuos y "long" columnas.
# En cada fila, habrÃ¡ una permutaciÃ³n (aleatoria) de los valores entre 1 y long
# --> initial = function(number,long){...}
initial = function(number, long){
individuos = matrix(nrow = number, ncol = long+1)
for(i in 1:number){
individuos [i,] = sample(1:30,30,replace = TRUE)
}
}
matriz = initial(4,long)
# Paso 3: Defina la funciÃ³n de inicializaciÃ³n, que reciba el nÃºmero de individuos a crear
# y el nÃºmero de puntos (variable long). Ãsta funciÃ³n debe devolver una matriz con tantas
# filas como individuos y "long" columnas.
# En cada fila, habrÃ¡ una permutaciÃ³n (aleatoria) de los valores entre 1 y long
# --> initial = function(number,long){...}
initial = function(number, long){
individuos = matrix(nrow = number, ncol = long+1)
for(i in 1:number){
individuos [i,] = sample(1:30,30,replace = TRUE)
}
individuos
}
matriz = initial(4,long)
View(matriz)
# Paso 3: Defina la funciÃ³n de inicializaciÃ³n, que reciba el nÃºmero de individuos a crear
# y el nÃºmero de puntos (variable long). Ãsta funciÃ³n debe devolver una matriz con tantas
# filas como individuos y "long" columnas.
# En cada fila, habrÃ¡ una permutaciÃ³n (aleatoria) de los valores entre 1 y long
# --> initial = function(number,long){...}
initial = function(number, long){
individuos = matrix(nrow = number, ncol = long+1)
for(i in 1:number){
individuos [i,] = append(sample(1:29,29,replace = TRUE),0,after = sample(2:27,1))
}
indivi
}
matriz = initial(4,long)
# Paso 3: Defina la funciÃ³n de inicializaciÃ³n, que reciba el nÃºmero de individuos a crear
# y el nÃºmero de puntos (variable long). Ãsta funciÃ³n debe devolver una matriz con tantas
# filas como individuos y "long" columnas.
# En cada fila, habrÃ¡ una permutaciÃ³n (aleatoria) de los valores entre 1 y long
# --> initial = function(number,long){...}
initial = function(number, long){
individuos = matrix(nrow = number, ncol = long+1)
for(i in 1:number){
individuos [i,] = append(sample(1:29,29,replace = TRUE),0,after = sample(2:27,1))
}
individuos
}
matriz = initial(4,long)
View(matriz)
tournamentselection = function(evaluation,number){
indexes = matrix(0,1,length(evaluation))
for (i in 1:length(evaluation)){
a = sample(length(evaluation),size=number)
indexes[i]=a[which.min(evaluation[a])]
}
return(indexes)
}
# Paso 2: Defina la funciÃ³n fitness, que reciba un individuo y la matriz de distancias
# y devuelva la longitud total de los dos caminos recorridos
# --> fitness = function(ind,distancias){...}
fitness = function(ind,distancias){
ruta1 = 0
ruta2 = 0
zero = FALSE
ruta2Existe = FALSE
primeroR1 = ind[1]
primeroR2 = 0
r1SoloUnPunto = FALSE;
if(ind[2] == 0){
r1SoloUnPunto = TRUE;
ruta1 = Inf
}
r2SoloUnPunto = FALSE;
if(ind[length(ind)-1] == 0){
r2SoloUnPunto = TRUE;
ruta2 = Inf
}
for(i in 2:length(ind)){
if(zero){
if(ind[i-1] != 0 & !r2SoloUnPunto){
ruta2Existe = true
ruta2 = ruta2 + distancias[ind[i],ind[i-1]]
}else{
primeroR2 = ind[i]
}
}else{
if(ind[i] == 0){
if(!r1SoloUnPunto)ruta1 = ruta1 + distancias[primeroR1,ind[i-1]]
zero = TRUE
}else if(!r1SoloUnPunto){
ruta1 = ruta1 + distancias[ind[i],ind[i-1]]
}
}
}
if(ruta2Existe){
ruta2 = ruta2 + distancias[primeroR2,ind[length(ind)]]
}
ruta1+ruta2
}
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(1,2,0)
distancia = fitness(individuo,distancias)
distancia
# Paso 2: Defina la funciÃ³n fitness, que reciba un individuo y la matriz de distancias
# y devuelva la longitud total de los dos caminos recorridos
# --> fitness = function(ind,distancias){...}
fitness = function(ind,distancias){
ruta1 = 0
ruta2 = 0
zero = FALSE
ruta2Existe = FALSE
primeroR1 = ind[1]
primeroR2 = 0
r1SoloUnPunto = FALSE;
if(ind[2] == 0){
r1SoloUnPunto = TRUE;
ruta1 = Inf
}
r2SoloUnPunto = FALSE;
if(ind[length(ind)-1] == 0){
r2SoloUnPunto = TRUE;
ruta2 = Inf
}
for(i in 2:length(ind)){
if(zero){
if(ind[i-1] != 0 & !r2SoloUnPunto){
ruta2Existe = true
ruta2 = ruta2 + distancias[ind[i],ind[i-1]]
}else{
primeroR2 = ind[i]
}
}else{
if(ind[i] == 0){
if(!r1SoloUnPunto)ruta1 = ruta1 + distancias[primeroR1,ind[i-1]]
zero = TRUE
}else if(!r1SoloUnPunto){
ruta1 = ruta1 + distancias[ind[i],ind[i-1]]
}
}
}
if(ruta2Existe){
ruta2 = ruta2 + distancias[primeroR2,ind[length(ind)]]
}
ruta1+ruta2
}
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(0)
distancia = fitness(individuo,distancias)
# Paso 2: Defina la funciÃ³n fitness, que reciba un individuo y la matriz de distancias
# y devuelva la longitud total de los dos caminos recorridos
# --> fitness = function(ind,distancias){...}
fitness = function(ind,distancias){
ruta1 = 0
ruta2 = 0
zero = FALSE
ruta2Existe = FALSE
primeroR1 = ind[1]
primeroR2 = 0
if(length(ind)==1) return Inf;
r1SoloUnPunto = FALSE;
if(ind[2] == 0){
r1SoloUnPunto = TRUE;
ruta1 = Inf
}
r2SoloUnPunto = FALSE;
if(ind[length(ind)-1] == 0){
r2SoloUnPunto = TRUE;
ruta2 = Inf
}
for(i in 2:length(ind)){
if(zero){
if(ind[i-1] != 0 & !r2SoloUnPunto){
ruta2Existe = true
ruta2 = ruta2 + distancias[ind[i],ind[i-1]]
}else{
primeroR2 = ind[i]
}
}else{
if(ind[i] == 0){
if(!r1SoloUnPunto)ruta1 = ruta1 + distancias[primeroR1,ind[i-1]]
zero = TRUE
}else if(!r1SoloUnPunto){
ruta1 = ruta1 + distancias[ind[i],ind[i-1]]
}
}
}
if(ruta2Existe){
ruta2 = ruta2 + distancias[primeroR2,ind[length(ind)]]
}
ruta1+ruta2
}
# Paso 2: Defina la funciÃ³n fitness, que reciba un individuo y la matriz de distancias
# y devuelva la longitud total de los dos caminos recorridos
# --> fitness = function(ind,distancias){...}
fitness = function(ind,distancias){
ruta1 = 0
ruta2 = 0
zero = FALSE
ruta2Existe = FALSE
primeroR1 = ind[1]
primeroR2 = 0
if(length(ind)==1){
ruta1 = Inf
return ruta1
}
r1SoloUnPunto = FALSE
if(ind[2] == 0){
r1SoloUnPunto = TRUE
ruta1 = Inf
}
r2SoloUnPunto = FALSE;
if(ind[length(ind)-1] == 0){
r2SoloUnPunto = TRUE
ruta2 = Inf
}
for(i in 2:length(ind)){
if(zero){
if(ind[i-1] != 0 & !r2SoloUnPunto){
ruta2Existe = true
ruta2 = ruta2 + distancias[ind[i],ind[i-1]]
}else{
primeroR2 = ind[i]
}
}else{
if(ind[i] == 0){
if(!r1SoloUnPunto)ruta1 = ruta1 + distancias[primeroR1,ind[i-1]]
zero = TRUE
}else if(!r1SoloUnPunto){
ruta1 = ruta1 + distancias[ind[i],ind[i-1]]
}
}
}
if(ruta2Existe){
ruta2 = ruta2 + distancias[primeroR2,ind[length(ind)]]
}
ruta1+ruta2
}
# Paso 2: Defina la funciÃ³n fitness, que reciba un individuo y la matriz de distancias
# y devuelva la longitud total de los dos caminos recorridos
# --> fitness = function(ind,distancias){...}
fitness = function(ind,distancias){
ruta1 = 0
ruta2 = 0
zero = FALSE
ruta2Existe = FALSE
primeroR1 = ind[1]
primeroR2 = 0
if(length(ind)==1){
return (Inf)
}
r1SoloUnPunto = FALSE
if(ind[2] == 0){
r1SoloUnPunto = TRUE
ruta1 = Inf
}
r2SoloUnPunto = FALSE;
if(ind[length(ind)-1] == 0){
r2SoloUnPunto = TRUE
ruta2 = Inf
}
for(i in 2:length(ind)){
if(zero){
if(ind[i-1] != 0 & !r2SoloUnPunto){
ruta2Existe = true
ruta2 = ruta2 + distancias[ind[i],ind[i-1]]
}else{
primeroR2 = ind[i]
}
}else{
if(ind[i] == 0){
if(!r1SoloUnPunto)ruta1 = ruta1 + distancias[primeroR1,ind[i-1]]
zero = TRUE
}else if(!r1SoloUnPunto){
ruta1 = ruta1 + distancias[ind[i],ind[i-1]]
}
}
}
if(ruta2Existe){
ruta2 = ruta2 + distancias[primeroR2,ind[length(ind)]]
}
ruta1+ruta2
}
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(0)
distancia = fitness(individuo,distancias)
distancia
# Paso 2: Defina la funciÃ³n fitness, que reciba un individuo y la matriz de distancias
# y devuelva la longitud total de los dos caminos recorridos
# --> fitness = function(ind,distancias){...}
fitness = function(ind,distancias){
ruta1 = 0
ruta2 = 0
zero = FALSE
ruta2Existe = FALSE
primeroR1 = ind[1]
primeroR2 = 0
if(length(ind)==1){
return (Inf)
}
r1SoloUnPunto = FALSE
if(ind[2] == 0){
r1SoloUnPunto = TRUE
ruta1 = Inf
}
r2SoloUnPunto = FALSE;
if(ind[length(ind)-1] == 0){
r2SoloUnPunto = TRUE
ruta2 = Inf
}
for(i in 2:length(ind)){
if(zero){
if(ind[i-1] != 0 & !r2SoloUnPunto){
ruta2Existe = true
ruta2 = ruta2 + distancias[ind[i],ind[i-1]]
}else{
primeroR2 = ind[i]
}
}else{
if(ind[i] == 0){
if(!r1SoloUnPunto)ruta1 = ruta1 + distancias[primeroR1,ind[i-1]]
zero = TRUE
}else if(!r1SoloUnPunto){
ruta1 = ruta1 + distancias[ind[i],ind[i-1]]
}
}
}
if(ruta2Existe){
ruta2 = ruta2 + distancias[primeroR2,ind[length(ind)]]
}
ruta1+ruta2
}
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(1,0)
distancia = fitness(individuo,distancias)
distancia
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(1,2,0)
distancia = fitness(individuo,distancias)
distancia
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(1,2,0,3)
distancia = fitness(individuo,distancias)
distancia
# Paso 3: Defina la funciÃ³n de inicializaciÃ³n, que reciba el nÃºmero de individuos a crear
# y el nÃºmero de puntos (variable long). Ãsta funciÃ³n debe devolver una matriz con tantas
# filas como individuos y "long" columnas.
# En cada fila, habrÃ¡ una permutaciÃ³n (aleatoria) de los valores entre 1 y long
# --> initial = function(number,long){...}
initial = function(number, long){
individuos = matrix(nrow = number, ncol = long+1)
for(i in 1:number){
individuos [i,] = append(sample(1:29,29,replace = TRUE),0,after = sample(2:27,1))
}
individuos
}
# Paso 2: Defina la funciÃ³n fitness, que reciba un individuo y la matriz de distancias
# y devuelva la longitud total de los dos caminos recorridos
# --> fitness = function(ind,distancias){...}
fitness = function(ind,distancias){
ruta1 = 0
ruta2 = 0
zero = FALSE
ruta2Existe = FALSE
primeroR1 = ind[1]
primeroR2 = 0
if(ind[2] == 0 | ind[length(ind)-1] == 0 | length(ind)==1){
return(Inf)
}
for(i in 2:length(ind)){
if(zero){
if(ind[i-1] != 0){
ruta2Existe = true
ruta2 = ruta2 + distancias[ind[i],ind[i-1]]
}else{
primeroR2 = ind[i]
}
}else{
if(ind[i] == 0){
ruta1 = ruta1 + distancias[primeroR1,ind[i-1]]
zero = TRUE
}else{
ruta1 = ruta1 + distancias[ind[i],ind[i-1]]
}
}
}
if(ruta2Existe){
ruta2 = ruta2 + distancias[primeroR2,ind[length(ind)]]
}
ruta1+ruta2
}
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(1,2,0,3)
distancia = fitness(individuo,distancias)
distancia
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(2,0,3)
distancia = fitness(individuo,distancias)
distancia
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(0,3)
distancia = fitness(individuo,distancias)
distancia
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(0)
distancia = fitness(individuo,distancias)
# Paso 2: Defina la funciÃ³n fitness, que reciba un individuo y la matriz de distancias
# y devuelva la longitud total de los dos caminos recorridos
# --> fitness = function(ind,distancias){...}
fitness = function(ind,distancias){
ruta1 = 0
ruta2 = 0
zero = FALSE
ruta2Existe = FALSE
primeroR1 = ind[1]
primeroR2 = 0
if(length(ind)==1 | ind[2] == 0 | ind[length(ind)-1] == 0){
return(Inf)
}
for(i in 2:length(ind)){
if(zero){
if(ind[i-1] != 0){
ruta2Existe = true
ruta2 = ruta2 + distancias[ind[i],ind[i-1]]
}else{
primeroR2 = ind[i]
}
}else{
if(ind[i] == 0){
ruta1 = ruta1 + distancias[primeroR1,ind[i-1]]
zero = TRUE
}else{
ruta1 = ruta1 + distancias[ind[i],ind[i-1]]
}
}
}
if(ruta2Existe){
ruta2 = ruta2 + distancias[primeroR2,ind[length(ind)]]
}
ruta1+ruta2
}
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(0)
distancia = fitness(individuo,distancias)
# Paso 2: Defina la funciÃ³n fitness, que reciba un individuo y la matriz de distancias
# y devuelva la longitud total de los dos caminos recorridos
# --> fitness = function(ind,distancias){...}
fitness = function(ind,distancias){
ruta1 = 0
ruta2 = 0
zero = FALSE
ruta2Existe = FALSE
primeroR1 = ind[1]
primeroR2 = 0
if(length(ind)==1 || ind[2] == 0 || ind[length(ind)-1] == 0){
return(Inf)
}
for(i in 2:length(ind)){
if(zero){
if(ind[i-1] != 0){
ruta2Existe = true
ruta2 = ruta2 + distancias[ind[i],ind[i-1]]
}else{
primeroR2 = ind[i]
}
}else{
if(ind[i] == 0){
ruta1 = ruta1 + distancias[primeroR1,ind[i-1]]
zero = TRUE
}else{
ruta1 = ruta1 + distancias[ind[i],ind[i-1]]
}
}
}
if(ruta2Existe){
ruta2 = ruta2 + distancias[primeroR2,ind[length(ind)]]
}
ruta1+ruta2
}
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(0)
distancia = fitness(individuo,distancias)
distancia
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(1,0)
distancia = fitness(individuo,distancias)
distancia
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(21,1,0)
distancia = fitness(individuo,distancias)
distancia
#TODO BORRAR ESTO SOLO PARA PRUEBAS
individuo = c(21,1,0,3)
distancia = fitness(individuo,distancias)
distancia
# Paso 3: Defina la funciÃ³n de inicializaciÃ³n, que reciba el nÃºmero de individuos a crear
# y el nÃºmero de puntos (variable long). Ãsta funciÃ³n debe devolver una matriz con tantas
# filas como individuos y "long" columnas.
# En cada fila, habrÃ¡ una permutaciÃ³n (aleatoria) de los valores entre 1 y long
# --> initial = function(number,long){...}
initial = function(number, long){
individuos = matrix(nrow = number, ncol = long+1)
for(i in 1:number){
individuos [i,] = append(sample(1:29,29,replace = TRUE),0,after = sample(1:29,1))
}
individuos
}
matriz = initial(4,long)
View(matriz)
