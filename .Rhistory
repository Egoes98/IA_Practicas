# Tiempo dedicado a la entrega:
# Dificultades encontradas y manera de resolverlas:
##---------------------------------------------------------------------------
# 1. AsegÃºrese de incluir, junto a esta plantilla, cualquier fichero necesario
#    para su ejecuciÃ³n, incluidos datasets
# 2. Si utiliza una funciÃ³n de un determinado paquete, no olvide incluir la
#    correspondiente llamada a la funciÃ³n "library()"
# 3. No olvide comentar el cÃ³digo, en especial aquellos comandos no-triviales
#    (recuerda que parte de la calificaciÃ³n depende de la limpieza del cÃ³digo)
#---------------------------------------------------------------------------.
rm(list = ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(frbs)
library(ggplot2)
# (incluya aquÃ­ cualquier librerÃ­a adicional)
#---------------------------------------------------------------------------
# Â¿Quien ha engordado/crecido?
library(tidyverse)
dir("datos")
datos = read.csv("datos/players_stats_by_season_full_details.csv")
resultado = datos %>%
group_by(Player, birth_date) %>%
summarise(cambioaltura = max(height_cm, na.rm = T)-min(height_cm, na.rm = T),
cambiopeso = max(weight_kg, na.rm = T)-min(weight_kg, na.rm = T),
temporadas = n()) %>%
filter((cambioaltura>0 | cambiopeso>0) & temporadas>1)
View(resultado)
resultado = datos %>%
select(League, Season, Player, birth_date, nationality,FTM,FTA) %>%
mutate(aciertolibre = FTM/FTA) %>%
filter(FTA > 500)
#---------------------------------------------------------------------------
######################## Parte 1 ###########################################
#--------------------------------------------------------------------------.
# Descarge y lea los datos que puede encontrar en el siguiente link:
# https://www.kaggle.com/jacobbaruch/basketball-players-stats-per-season-49-leagues
# Lea los datos en R
datos = read.csv("datos/players_stats_by_season_full_details.csv")
# AÃ±ada una columna llamada altocrisp con valores 0 o 1 (numÃ©ricos) segÃºn si la
# altura del juegador es menor o mayor que 190cm
datos$altocrisp = ifelse(datos$height_cm>190,1,0)
# Defina, como un vector de 4 elementos un conjunto difuso llamado alto
# (como considere deberÃ­a ser)
# --> alto = c(..., ..., ..., ...)
alto = c(170,175,185,200)
# Cree una funciÃ³n llamada trapMF que reciba un nÃºmero y un conjunto difuso y
# devuelva el valor de pertenencia del nÃºmero al conjunto definido
# --> trapMF = function(valor,conjunto){....}
trapMF = function(valor,conjunto){
if(valor < conjunto[1]){
return(0)
}else{
return(1)
}
}
trapMF(1,c(7,3,5,9)) #FUNCIONA
altosDifusa = datos %>% select(Player, Season, height_cm)
altosDifusa$altofuzzy = apply(data.frame(altosDifusa$height_cm), 1, function(x) trapMF(x,alto)) #NO FUNCIONA
# Tiempo dedicado a la entrega:
# Dificultades encontradas y manera de resolverlas:
##---------------------------------------------------------------------------
# 1. AsegÃºrese de incluir, junto a esta plantilla, cualquier fichero necesario
#    para su ejecuciÃ³n, incluidos datasets
# 2. Si utiliza una funciÃ³n de un determinado paquete, no olvide incluir la
#    correspondiente llamada a la funciÃ³n "library()"
# 3. No olvide comentar el cÃ³digo, en especial aquellos comandos no-triviales
#    (recuerda que parte de la calificaciÃ³n depende de la limpieza del cÃ³digo)
#---------------------------------------------------------------------------.
rm(list = ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(frbs)
library(ggplot2)
# (incluya aquÃ­ cualquier librerÃ­a adicional)
library(tidyverse)
#---------------------------------------------------------------------------
######################## Parte 1 ###########################################
#--------------------------------------------------------------------------.
# Descarge y lea los datos que puede encontrar en el siguiente link:
# https://www.kaggle.com/jacobbaruch/basketball-players-stats-per-season-49-leagues
# Lea los datos en R
datos = read.csv("datos/players_stats_by_season_full_details.csv")
resultados = datos %>% select(Player,Season,weight_kg,height_cm)
#---------------------------------------------------------------------------
######################## Parte 1 ###########################################
#--------------------------------------------------------------------------.
# Descarge y lea los datos que puede encontrar en el siguiente link:
# https://www.kaggle.com/jacobbaruch/basketball-players-stats-per-season-49-leagues
# Lea los datos en R
datos = read.csv("datos/players_stats_by_season_full_details.csv")
resultados = datos %>% select(Player,Season,weight_kg,height_cm)
rm
rm
rm
# Tiempo dedicado a la entrega:
# Dificultades encontradas y manera de resolverlas:
##---------------------------------------------------------------------------
# 1. AsegÃºrese de incluir, junto a esta plantilla, cualquier fichero necesario
#    para su ejecuciÃ³n, incluidos datasets
# 2. Si utiliza una funciÃ³n de un determinado paquete, no olvide incluir la
#    correspondiente llamada a la funciÃ³n "library()"
# 3. No olvide comentar el cÃ³digo, en especial aquellos comandos no-triviales
#    (recuerda que parte de la calificaciÃ³n depende de la limpieza del cÃ³digo)
#---------------------------------------------------------------------------.
rm(list = ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(frbs)
library(ggplot2)
# (incluya aquÃ­ cualquier librerÃ­a adicional)
library(tidyverse)
#---------------------------------------------------------------------------
######################## Parte 1 ###########################################
#--------------------------------------------------------------------------.
# Descarge y lea los datos que puede encontrar en el siguiente link:
# https://www.kaggle.com/jacobbaruch/basketball-players-stats-per-season-49-leagues
# Lea los datos en R
datos = read.csv("datos/players_stats_by_season_full_details.csv")
resultados = datos %>% select(Player,Season,weight_kg,height_cm)
# AÃ±ada una columna llamada altocrisp con valores 0 o 1 (numÃ©ricos) segÃºn si la
# altura del juegador es menor o mayor que 190cm
resultados$altocrisp = ifelse(resultados$height_cm>190,1,0)
# Defina, como un vector de 4 elementos un conjunto difuso llamado alto
# (como considere deberÃ­a ser)
# --> alto = c(..., ..., ..., ...)
alto = c(175,180,190,200)
trapMF= function(valor, conjunto){
ifelse(between(valor,conjunto[1], conjunto[2]),((valor-conjunto[1])/(conjunto[2]-conjunto[1])),
ifelse(between(valor,conjunto[2], conjunto[3]),1,
ifelse(between(valor,conjunto[3], conjunto[4]),((conjunto[4]-valor)/(conjunto[4]-conjunto[3])),0)))
}
trapMf(200,alto)
# AÃ±ada una columna llamada altofuzzy, resultado de aplicar la funciÃ³n trapMF sobre los elementos de la columna height y el conjunto alto
# --> nombredeldataframe$altofuzzy = apply(data.frame(nombredeldataframe$height), 1, FUN=function(x) trapMF(x,alto))
resultados$altofuzzy = apply(data.frame(resultados$height_cm), 1, FUN=function(x) trapMF(x,alto))
# Dibuje
# Haga un dibujo que muestre la altura del jugador en el eje X y el valor de altocrisp
# Haga un dibujo que muestre la altura del jugador en el eje X y el valor de altofuzzy
# En ambos casos, utilize el valor de altura para colorear los puntos
# --> Utilize la librerÃ­a ggplop2
ggplot(resultados,aes(x=height_cm,y=altocrisp))+geom_point()
ggplot(resultados,aes(x=height_cm,y=altofuzzy))+geom_point()
# AÃ±ada una columna llamada pesadofuzzy, resultado de aplicar la funciÃ³n trapMF sobre los elementos de la columna points_per_minute y el conjunto bueno
# --> nombredeldataframe$pesadofuzzy = apply(..., 1, FUN=function(x) trapMF(x,pesado))
resultados$pesadofuzzy = apply(resultados$weight_kg,1,function(x) trapMF(x,pesado))
# AÃ±ada una columna llamada pesadofuzzy, resultado de aplicar la funciÃ³n trapMF sobre los elementos de la columna points_per_minute y el conjunto bueno
# --> nombredeldataframe$pesadofuzzy = apply(..., 1, FUN=function(x) trapMF(x,pesado))
resultados$pesadofuzzy = apply(data.frame(resultados$weight_kg),1,function(x) trapMF(x,pesado))
# AÃ±ada una columna llamada pesadofuzzy, resultado de aplicar la funciÃ³n trapMF sobre los elementos de la columna points_per_minute y el conjunto bueno
# --> nombredeldataframe$pesadofuzzy = apply(..., 1, FUN=function(x) trapMF(x,pesado))
resultados$pesadofuzzy = apply(data.frame(resultados$weight_kg),1,function(x) trapMF(x,pesado))
#---------------------------------------------------------------------------
######################## Parte 2 ###########################################
#--------------------------------------------------------------------------.
# De la misma manera que en la primera parte, cree un conjunto llamado "pesado",
# para el peso de un jugador
# --> pesado = c(..., ..., ..., ...)
pesado = c(1,2,3,4)
# AÃ±ada una columna llamada pesadofuzzy, resultado de aplicar la funciÃ³n trapMF sobre los elementos de la columna points_per_minute y el conjunto bueno
# --> nombredeldataframe$pesadofuzzy = apply(..., 1, FUN=function(x) trapMF(x,pesado))
resultados$pesadofuzzy = apply(data.frame(resultados$weight_kg),1,function(x) trapMF(x,pesado))
resultados$altoypesado = apply(data.frame(resultados$alto),data.frame(resultados$pesadofuzzy),2,function(x) trapMF(x,pesado))
resultados$altoypesado = apply(data.frame(resultados$alto),data.frame(resultados$pesadofuzzy),1,function(x) trapMF(x,pesado))
# Genere una columna llamada altoypesado resultado de la tnorma mÃ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = resultados %>% select(max(altofuzzy,pesadofuzzy))
# Genere una columna llamada altoypesado resultado de la tnorma mÃ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = resultados %>% select(altofuzzy)
# Genere una columna llamada altoypesado resultado de la tnorma mÃ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = resultados %>% select(max(altofuzzy))
# Genere una columna llamada altoypesado resultado de la tnorma mÃ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = resultados %>% select(max(resultados$altofuzzy,resultados$pesadofuzzy))
# Dibuje
# Genere una columna llamada altoypesado resultado de la tnorma mÃ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = resultados %>% select(max(resultados$altofuzzy,resultados$pesadofuzzy))
# Genere una columna llamada altoypesado resultado de la tnorma mÃ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = apply(resultados, 2, max)
# Genere una columna llamada altoypesado resultado de la tnorma mÃ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = apply(data.frame(resultados$weight_kg), 1, max)
# Genere una columna llamada altoypesado resultado de la tnorma mÃ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = apply(data.frame(resultados$weight_kg), data.frame(resultados$height_cm), 1, max)
# Genere una columna llamada altoypesado resultado de la tnorma mÃ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = apply(data.frame(resultados$weight_kg, resultados$height_cm), 1, max)
# Genere una columna llamada altoypesado resultado de la tnorma mÃ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = apply(data.frame(resultados$altofuzzy, resultados$pesadofuzzy), 1, max)
#---------------------------------------------------------------------------
######################## Parte 2 ###########################################
#--------------------------------------------------------------------------.
# De la misma manera que en la primera parte, cree un conjunto llamado "pesado",
# para el peso de un jugador
# --> pesado = c(..., ..., ..., ...)
pesado = c(85,100,120,200)
# AÃ±ada una columna llamada pesadofuzzy, resultado de aplicar la funciÃ³n trapMF sobre los elementos de la columna points_per_minute y el conjunto bueno
# --> nombredeldataframe$pesadofuzzy = apply(..., 1, FUN=function(x) trapMF(x,pesado))
resultados$pesadofuzzy = apply(data.frame(resultados$weight_kg),1,function(x) trapMF(x,pesado))
# Genere una columna llamada altoypesado resultado de la tnorma mÃ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = apply(data.frame(resultados$altofuzzy, resultados$pesadofuzzy), 1, max)
# Dibuje
# Haga un dibujo que muestre la altura del jugador en el eje X, su peso en el eje Y, y utilize para dar color el valor de la columna altoypesado, generada
# --> Utilize la librerÃ­a ggplop2
ggplot(resultados,aes(x=altofuzzy,y=pesadofuzzy))+geom_point()
# Dibuje
# Haga un dibujo que muestre la altura del jugador en el eje X, su peso en el eje Y, y utilize para dar color el valor de la columna altoypesado, generada
# --> Utilize la librerÃ­a ggplop2
ggplot(resultados,aes(x=altofuzzy,y=pesadofuzzy),col=altoypesado)+geom_point()
