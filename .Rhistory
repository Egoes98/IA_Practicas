# Tiempo dedicado a la entrega:
# Dificultades encontradas y manera de resolverlas:
##---------------------------------------------------------------------------
# 1. AsegÃƒÂºrese de incluir, junto a esta plantilla, cualquier fichero necesario
#    para su ejecuciÃƒÂ³n, incluidos datasets
# 2. Si utiliza una funciÃƒÂ³n de un determinado paquete, no olvide incluir la
#    correspondiente llamada a la funciÃƒÂ³n "library()"
# 3. No olvide comentar el cÃƒÂ³digo, en especial aquellos comandos no-triviales
#    (recuerda que parte de la calificaciÃƒÂ³n depende de la limpieza del cÃƒÂ³digo)
#---------------------------------------------------------------------------.
rm(list = ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(frbs)
library(ggplot2)
# (incluya aquÃƒ­ cualquier librerÃƒ­a adicional)
library(tidyverse)
#---------------------------------------------------------------------------
######################## Parte 1 ###########################################
#--------------------------------------------------------------------------.
# Descarge y lea los datos que puede encontrar en el siguiente link:
# https://www.kaggle.com/jacobbaruch/basketball-players-stats-per-season-49-leagues
# Lea los datos en R
datos = read.csv("datos/players_stats_by_season_full_details.csv")
resultados = datos %>% select(Player,Season,weight_kg,height_cm)
# AÃƒÂ±ada una columna llamada altocrisp con valores 0 o 1 (numÃƒÂ©ricos) segÃƒÂºn si la
# altura del juegador es menor o mayor que 190cm
resultados$altocrisp = ifelse(resultados$height_cm>190,1,0)
# Defina, como un vector de 4 elementos un conjunto difuso llamado alto
# (como considere deberÃƒ­a ser)
# --> alto = c(..., ..., ..., ...)
alto = c(175,180,190,200)
trapMF= function(valor, conjunto){
ifelse(between(valor,conjunto[1], conjunto[2]),((valor-conjunto[1])/(conjunto[2]-conjunto[1])),
ifelse(between(valor,conjunto[2], conjunto[3]),1,
ifelse(between(valor,conjunto[3], conjunto[4]),((conjunto[4]-valor)/(conjunto[4]-conjunto[3])),0)))
}
# AÃƒÂ±ada una columna llamada altofuzzy, resultado de aplicar la funciÃƒÂ³n trapMF sobre los elementos de la columna height y el conjunto alto
# --> nombredeldataframe$altofuzzy = apply(data.frame(nombredeldataframe$height), 1, FUN=function(x) trapMF(x,alto))
resultados$altofuzzy = apply(data.frame(resultados$height_cm), 1, FUN=function(x) trapMF(x,alto))
# Dibuje
# Haga un dibujo que muestre la altura del jugador en el eje X y el valor de altocrisp
# Haga un dibujo que muestre la altura del jugador en el eje X y el valor de altofuzzy
# En ambos casos, utilize el valor de altura para colorear los puntos
# --> Utilize la librerÃƒ­a ggplop2
ggplot(resultados,aes(x=height_cm,y=altocrisp))+geom_point()
ggplot(resultados,aes(x=height_cm,y=altofuzzy))+geom_point()
#---------------------------------------------------------------------------
######################## Parte 2 ###########################################
#--------------------------------------------------------------------------.
# De la misma manera que en la primera parte, cree un conjunto llamado "pesado",
# para el peso de un jugador
# --> pesado = c(..., ..., ..., ...)
pesado = c(85,100,120,200)
# AÃƒÂ±ada una columna llamada pesadofuzzy, resultado de aplicar la funciÃƒÂ³n trapMF sobre los elementos de la columna points_per_minute y el conjunto bueno
# --> nombredeldataframe$pesadofuzzy = apply(..., 1, FUN=function(x) trapMF(x,pesado))
resultados$pesadofuzzy = apply(data.frame(resultados$weight_kg),1,function(x) trapMF(x,pesado))
# Genere una columna llamada altoypesado resultado de la tnorma mÃƒ­nimo sobre las columnas altofuzzy y pesadofuzzy
# --> nombredeldataframe$altoypesado = ...
resultados$altoypesado = apply(data.frame(resultados$altofuzzy, resultados$pesadofuzzy), 1, max)
# Dibuje
# Haga un dibujo que muestre la altura del jugador en el eje X, su peso en el eje Y, y utilize para dar color el valor de la columna altoypesado, generada
# --> Utilize la librerÃƒ­a ggplop2
ggplot(resultados,aes(x=altofuzzy,y=pesadofuzzy),col=altoypesado)+geom_point()
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
######################## Parte 3 ###########################################
#---------------------------------------------------------------------------
######################## Parte 3 ###########################################
#--------------------------------------------------------------------------.
#---------------------------------------------------------------------------
######################## Parte 3 ###########################################
#--------------------------------------------------------------------------.
# Implemente un sistema difuso que dÃƒÂ© una valoraciÃƒÂ³n entre 0 y 100 de los jugadores de baloncesto
# Criterio de valoraciÃƒÂ³n libre
# Criterio de valoraciÃƒÂ³n libre
# Requisitos bÃƒÂ¡sicos
# Criterio de valoraciÃƒÂ³n libre
# Requisitos bÃƒÂ¡sicos
# Utilizar al menos 2 de las variables y codificar cada una de ellas con al menos 3 conjuntos difusos
# Criterio de valoraciÃƒÂ³n libre
# Requisitos bÃƒÂ¡sicos
# Utilizar al menos 2 de las variables y codificar cada una de ellas con al menos 3 conjuntos difusos
# Incluir al menos 5 reglas difusas
# Criterio de valoraciÃƒÂ³n libre
# Requisitos bÃƒÂ¡sicos
# Utilizar al menos 2 de las variables y codificar cada una de ellas con al menos 3 conjuntos difusos
# Incluir al menos 5 reglas difusas
# AÃƒÂ±ada el resultado de la ejecuciÃƒÂ³n del sistema como una nueva columna a los datos y genere un dibujo
# Criterio de valoraciÃƒÂ³n libre
# Requisitos bÃƒÂ¡sicos
# Utilizar al menos 2 de las variables y codificar cada una de ellas con al menos 3 conjuntos difusos
# Incluir al menos 5 reglas difusas
# AÃƒÂ±ada el resultado de la ejecuciÃƒÂ³n del sistema como una nueva columna a los datos y genere un dibujo
# Pista1: En la ayuda de la funciÃƒÂ³n "frbs.gen" tenÃƒÂ©is un ejemplo de creaciÃƒÂ³n de un sistema difuso
# Criterio de valoraciÃƒÂ³n libre
# Requisitos bÃƒÂ¡sicos
# Utilizar al menos 2 de las variables y codificar cada una de ellas con al menos 3 conjuntos difusos
# Incluir al menos 5 reglas difusas
# AÃƒÂ±ada el resultado de la ejecuciÃƒÂ³n del sistema como una nueva columna a los datos y genere un dibujo
# Pista1: En la ayuda de la funciÃƒÂ³n "frbs.gen" tenÃƒÂ©is un ejemplo de creaciÃƒÂ³n de un sistema difuso
# Pista2: Os dejo aquÃƒ­ un desglose de los pasos a dar, con alguna indicaciÃƒÂ³n
# Criterio de valoraciÃƒÂ³n libre
# Requisitos bÃƒÂ¡sicos
# Utilizar al menos 2 de las variables y codificar cada una de ellas con al menos 3 conjuntos difusos
# Incluir al menos 5 reglas difusas
# AÃƒÂ±ada el resultado de la ejecuciÃƒÂ³n del sistema como una nueva columna a los datos y genere un dibujo
# Pista1: En la ayuda de la funciÃƒÂ³n "frbs.gen" tenÃƒÂ©is un ejemplo de creaciÃƒÂ³n de un sistema difuso
# Pista2: Os dejo aquÃƒ­ un desglose de los pasos a dar, con alguna indicaciÃƒÂ³n
# Consejo: explore la posibilidad de crear nuevas columnas en funciÃƒÂ³n de los datos numÃƒÂ©ricos que hay en la tabla
# Criterio de valoraciÃƒÂ³n libre
# Requisitos bÃƒÂ¡sicos
# Utilizar al menos 2 de las variables y codificar cada una de ellas con al menos 3 conjuntos difusos
# Incluir al menos 5 reglas difusas
# AÃƒÂ±ada el resultado de la ejecuciÃƒÂ³n del sistema como una nueva columna a los datos y genere un dibujo
# Pista1: En la ayuda de la funciÃƒÂ³n "frbs.gen" tenÃƒÂ©is un ejemplo de creaciÃƒÂ³n de un sistema difuso
# Pista2: Os dejo aquÃƒ­ un desglose de los pasos a dar, con alguna indicaciÃƒÂ³n
# Consejo: explore la posibilidad de crear nuevas columnas en funciÃƒÂ³n de los datos numÃƒÂ©ricos que hay en la tabla
#  - % de acierto de 3 puntos
# Criterio de valoraciÃƒÂ³n libre
# Requisitos bÃƒÂ¡sicos
# Utilizar al menos 2 de las variables y codificar cada una de ellas con al menos 3 conjuntos difusos
# Incluir al menos 5 reglas difusas
# AÃƒÂ±ada el resultado de la ejecuciÃƒÂ³n del sistema como una nueva columna a los datos y genere un dibujo
# Pista1: En la ayuda de la funciÃƒÂ³n "frbs.gen" tenÃƒÂ©is un ejemplo de creaciÃƒÂ³n de un sistema difuso
# Pista2: Os dejo aquÃƒ­ un desglose de los pasos a dar, con alguna indicaciÃƒÂ³n
# Consejo: explore la posibilidad de crear nuevas columnas en funciÃƒÂ³n de los datos numÃƒÂ©ricos que hay en la tabla
#  - % de acierto de 3 puntos
#  - Puntos/partido
# Requisitos bÃƒÂ¡sicos
# Utilizar al menos 2 de las variables y codificar cada una de ellas con al menos 3 conjuntos difusos
# Incluir al menos 5 reglas difusas
# AÃƒÂ±ada el resultado de la ejecuciÃƒÂ³n del sistema como una nueva columna a los datos y genere un dibujo
# Pista1: En la ayuda de la funciÃƒÂ³n "frbs.gen" tenÃƒÂ©is un ejemplo de creaciÃƒÂ³n de un sistema difuso
# Pista2: Os dejo aquÃƒ­ un desglose de los pasos a dar, con alguna indicaciÃƒÂ³n
# Consejo: explore la posibilidad de crear nuevas columnas en funciÃƒÂ³n de los datos numÃƒÂ©ricos que hay en la tabla
#  - % de acierto de 3 puntos
#  - Puntos/partido
#  - Minutos jugados/partido
# Paso 1, definir todos los conjuntos difusos a usar como vectores de 5 elementos
# Paso 1, definir todos los conjuntos difusos a usar como vectores de 5 elementos
# --> etiqueta1 = c(valor,xxx, xxx, xxx, xxx)
# Paso 1, definir todos los conjuntos difusos a usar como vectores de 5 elementos
# --> etiqueta1 = c(valor,xxx, xxx, xxx, xxx)
# *nota, valor serÃƒÂ¡ 2, 3, 4, dependiendo si es una etiqueta "izquierda"(2), "central"(4), o "derecha"(3)
# Paso 1, definir todos los conjuntos difusos a usar como vectores de 5 elementos
# --> etiqueta1 = c(valor,xxx, xxx, xxx, xxx)
# *nota, valor serÃƒÂ¡ 2, 3, 4, dependiendo si es una etiqueta "izquierda"(2), "central"(4), o "derecha"(3)
# *para etiquetas "izquierdas", c(2,b,c,d,NA)
# Paso 1, definir todos los conjuntos difusos a usar como vectores de 5 elementos
# --> etiqueta1 = c(valor,xxx, xxx, xxx, xxx)
# *nota, valor serÃƒÂ¡ 2, 3, 4, dependiendo si es una etiqueta "izquierda"(2), "central"(4), o "derecha"(3)
# *para etiquetas "izquierdas", c(2,b,c,d,NA)
# *para etiquetas "centrales", c(4,a,b,c,d)
# Paso 1, definir todos los conjuntos difusos a usar como vectores de 5 elementos
# --> etiqueta1 = c(valor,xxx, xxx, xxx, xxx)
# *nota, valor serÃƒÂ¡ 2, 3, 4, dependiendo si es una etiqueta "izquierda"(2), "central"(4), o "derecha"(3)
# *para etiquetas "izquierdas", c(2,b,c,d,NA)
# *para etiquetas "centrales", c(4,a,b,c,d)
# *para etiquetas "derechas", c(3,a,b,c,NA)
# Paso 2, pegar todas las etiquetas por columnas y asignar a una variable
# Paso 3, definir una matriz con el nÃƒÂºmero de etiquetas de cada entrada
# Defina, como un vector de 4 elementos un conjunto difuso llamado alto
# (como considere deberÃƒ­a ser)
# --> alto = c(..., ..., ..., ...)
alto = c(175,180,190,2000)
trapMF= function(valor, conjunto){
ifelse(between(valor,conjunto[1], conjunto[2]),((valor-conjunto[1])/(conjunto[2]-conjunto[1])),
ifelse(between(valor,conjunto[2], conjunto[3]),1,
ifelse(between(valor,conjunto[3], conjunto[4]),((conjunto[4]-valor)/(conjunto[4]-conjunto[3])),0)))
}
# AÃƒÂ±ada una columna llamada altofuzzy, resultado de aplicar la funciÃƒÂ³n trapMF sobre los elementos de la columna height y el conjunto alto
# --> nombredeldataframe$altofuzzy = apply(data.frame(nombredeldataframe$height), 1, FUN=function(x) trapMF(x,alto))
resultados$altofuzzy = apply(data.frame(resultados$height_cm), 1, FUN=function(x) trapMF(x,alto))
# Dibuje
# Haga un dibujo que muestre la altura del jugador en el eje X y el valor de altocrisp
# Haga un dibujo que muestre la altura del jugador en el eje X y el valor de altofuzzy
# En ambos casos, utilize el valor de altura para colorear los puntos
# --> Utilize la librerÃƒ­a ggplop2
ggplot(resultados,aes(x=height_cm,y=altocrisp))+geom_point()
ggplot(resultados,aes(x=height_cm,y=altofuzzy))+geom_point()
View(resultados)
# Defina, como un vector de 4 elementos un conjunto difuso llamado alto
# (como considere deberÃƒ­a ser)
# --> alto = c(..., ..., ..., ...)
alto = c(175,180,2000,2000)
trapMF= function(valor, conjunto){
ifelse(between(valor,conjunto[1], conjunto[2]),((valor-conjunto[1])/(conjunto[2]-conjunto[1])),
ifelse(between(valor,conjunto[2], conjunto[3]),1,
ifelse(between(valor,conjunto[3], conjunto[4]),((conjunto[4]-valor)/(conjunto[4]-conjunto[3])),0)))
}
# AÃƒÂ±ada una columna llamada altofuzzy, resultado de aplicar la funciÃƒÂ³n trapMF sobre los elementos de la columna height y el conjunto alto
# --> nombredeldataframe$altofuzzy = apply(data.frame(nombredeldataframe$height), 1, FUN=function(x) trapMF(x,alto))
resultados$altofuzzy = apply(data.frame(resultados$height_cm), 1, FUN=function(x) trapMF(x,alto))
# Defina, como un vector de 4 elementos un conjunto difuso llamado alto
# (como considere deberÃƒ­a ser)
# --> alto = c(..., ..., ..., ...)
alto = c(170,180,200,230)
trapMF= function(valor, conjunto){
ifelse(between(valor,conjunto[1], conjunto[2]),((valor-conjunto[1])/(conjunto[2]-conjunto[1])),
ifelse(between(valor,conjunto[2], conjunto[3]),1,
ifelse(between(valor,conjunto[3], conjunto[4]),((conjunto[4]-valor)/(conjunto[4]-conjunto[3])),0)))
}
# AÃƒÂ±ada una columna llamada altofuzzy, resultado de aplicar la funciÃƒÂ³n trapMF sobre los elementos de la columna height y el conjunto alto
# --> nombredeldataframe$altofuzzy = apply(data.frame(nombredeldataframe$height), 1, FUN=function(x) trapMF(x,alto))
resultados$altofuzzy = apply(data.frame(resultados$height_cm), 1, FUN=function(x) trapMF(x,alto))
# Dibuje
# Haga un dibujo que muestre la altura del jugador en el eje X y el valor de altocrisp
# Haga un dibujo que muestre la altura del jugador en el eje X y el valor de altofuzzy
# En ambos casos, utilize el valor de altura para colorear los puntos
# --> Utilize la librerÃƒ­a ggplop2
ggplot(resultados,aes(x=height_cm,y=altocrisp))+geom_point()
ggplot(resultados,aes(x=height_cm,y=altofuzzy))+geom_point()
